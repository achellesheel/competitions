import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler

# Define the file paths
train_data_path = r'C:\Users\PRANAV CHATURVEDI\Downloads\machine learning\titanic\train.csv'
test_data_path = r'C:\Users\PRANAV CHATURVEDI\Downloads\machine learning\titanic\test.csv'

# Load the dataset
train_data = pd.read_csv(train_data_path)
test_data = pd.read_csv(test_data_path)

# Data Preprocessing
train_data = train_data.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis=1)
test_data = test_data.drop(['Name', 'Ticket', 'Cabin'], axis=1)

# Handle missing data
train_data['Age'].fillna(train_data['Age'].median(), inplace=True)
test_data['Age'].fillna(test_data['Age'].median(), inplace=True)
train_data['Embarked'].fillna(train_data['Embarked'].mode()[0], inplace=True)
test_data['Fare'].fillna(test_data['Fare'].median(), inplace=True)

# Feature Engineering
train_data['FamilySize'] = train_data['SibSp'] + train_data['Parch']
test_data['FamilySize'] = test_data['SibSp'] + test_data['Parch']

# Convert categorical features into numerical values or Encoding Categorical Variables
train_data = pd.get_dummies(train_data, columns=['Sex', 'Embarked'])
test_data = pd.get_dummies(test_data, columns=['Sex', 'Embarked'])

# Scaling/Normalization
scaler = StandardScaler()
train_data[['Age', 'Fare']] = scaler.fit_transform(train_data[['Age', 'Fare']])
test_data[['Age', 'Fare']] = scaler.fit_transform(test_data[['Age', 'Fare']])

# Data Splitting
X = train_data.drop('Survived', axis=1)
y = train_data['Survived']
X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=0)

# Model Selection and Training
model = RandomForestClassifier(n_estimators=100, random_state=0)
model.fit(X_train, y_train)

# Model Evaluation
predictions = model.predict(X_valid)
accuracy = accuracy_score(y_valid, predictions)
print("Accuracy:", accuracy)

# Make Predictions on the Test Data
test_predictions = model.predict(test_data.drop("PassengerId", axis=1))

# Prepare for Submission
submission = pd.DataFrame({
    "PassengerId": test_data["PassengerId"],
    "Survived": test_predictions
})
file_path = r'C:\Users\PRANAV CHATURVEDI\Downloads\machine learning\titanic\submissionrandomforest.csv'
submission.to_csv(file_path, index=False)

